openapi: 3.0.0
info:
  description:  REST API CRUD of Green Hortus plants
  version: 1.0.0
  title: Green Hortus
servers:
  - url: '{environment}/v1'
    variables:
      environment:
        default: https://api.greenhortus.life
        enum:
          - https://api.greenhortus.life
          - http://localhost:8080
paths:
  /auth/register:
    post:
      summary: register a new user
      operationId: registerUser
      tags:
        - auth
      security: []
      requestBody:
        description: User to register
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/daoUser'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authUser'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /auth/login:
    post:
      summary: login a user
      operationId: loginUser
      tags:
        - auth
      security: []
      requestBody:
        description: User to login
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/daoUser'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authUser'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /auth/refresh:
    post:
      summary: refresh a token
      operationId: refreshToken
      tags:
        - auth
      security: []
      requestBody:
        description: User to refresh token
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authUser'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /plants:
    get:
      summary: get all information of plants
      operationId: getPlants
      tags:
        - plant
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/plant'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      summary: create a new plant
      operationId: createPlant
      tags:
        - plant
      requestBody:
        description: Plants to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/plant'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/plant'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /plants/{id}:
    get:
      summary: get a plant by id
      operationId: getPlantById
      tags:
        - plant
      parameters:
        - name: id
          in: path
          description: id of the plant to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/plant'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'       
    put:
      summary: update a plant
      operationId: updatePlant
      tags:
        - plant
      parameters:
        - name: id
          in: path
          description: id of the plant to update
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        description: Plant to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/plant'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/plant'
        '404':
          description: Not Found
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      summary: delete a plant
      operationId: deletePlant
      tags:
        - plant
      parameters:
        - name: id
          in: path
          description: id of the plant to delete
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /plants/research/{name}:
    get:
      summary: get a plant by name
      operationId: getPlantByName
      tags:
        - plant
      parameters:
        - name: name
          in: path
          description: name of the plant to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/plant'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /users:
    get:
      summary: get all information of users
      operationId: getUsers
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/daoUser'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      
    post:
      summary: create a new user
      operationId: createUser
      tags:
        - user
      requestBody:
        description: Users to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/daoUser'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dtoUser'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      
  /users/{email}:
    get:
      summary: get a user by email
      operationId: getUserByemail
      tags:
        - user
      parameters:
        - name: email
          in: path
          description: email of the user to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dtoUser'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      summary: update a user
      operationId: updateUser
      tags:
        - user
      parameters:
        - name: email
          in: path
          description: email of the user to update
          required: true
          schema:
            type: string
      requestBody:
        description: User to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/daoUser'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dtoUser'
        '404':
          description: Not Found
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      summary: delete a user
      operationId: deleteUser
      tags:
        - user
      parameters:
        - name: email
          in: path
          description: email of the user to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    authUser:
      type: object
      properties:
        email:
          type: string
        role:
          type: string
        access_token:
          type: string
        refresh_token:
          type: string
    plant:
      type: object
      properties:
        plant_id:
          type: integer
          format: int32
        name:
          type: string
        description:
          type: string
        minHumidity:
          type: integer
          format: int32
        maxHumidity:
          type: integer
          format: int32
        minTemperature:
          type: string
        maxTemperature:
          type: string
    dtoUser:
      type: object
      properties:
        email:
          type: string
        role:
          type: string
    daoUser:
      type: object
      properties:
        email:
          type: string
        password:
          type: string 
    error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

security:
  - bearerAuth: []

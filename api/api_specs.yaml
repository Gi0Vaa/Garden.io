openapi: 3.0.0
info:
  description:  REST API CRUD of Green Hortus plants
  version: 1.0.0
  title: Green Hortus
paths:
  /api/v1/auth/google:
      get:
        summary: Start google authentication
        operationId: startGoogleAuth
        security:
          - GoogleOAuth: []
        responses:
          '302':
            description: Reindirizza l'utente alla pagina di login di Google
          '401':
            description: Non autorizzato
  /api/v1/auth/google/callback:
    get:
      summary: Callback for google authentication
      operationId: googleAuthCallback
      parameters:
        - in: query
          name: code
          schema:
            type: string
          allowReserved: true
        - in: query
          name: scope
          schema:
            type: string
          allowReserved: true
        - in: query
          name: authuser
          schema:
            type: string
          allowReserved: true
        - in: query
          name: prompt
          schema:
            type: string
          allowReserved: true
      security:
        - GoogleOAuth: []
      responses:
        '200':
          description: Autenticazione riuscita
        '401':
          description: Non autorizzato
  /api/v1/auth/logout:
    get:
      summary: Logout
      operationId: logout
      responses:
        '200':
          description: Logout effettuato
        '401':
          description: Non autorizzato
  /api/v1/plants:
    get:
      summary: get all information of plants
      operationId: getPlants
      tags:
        - plant
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/plant'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      summary: create a new plant
      operationId: createPlant
      tags:
        - plant
      requestBody:
        description: Plants to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/plant'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/plant'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/v1/plants/{id}:
    get:
      summary: get a plant by id
      operationId: getPlantById
      tags:
        - plant
      parameters:
        - name: id
          in: path
          description: id of the plant to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/plant'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'       
    put:
      summary: update a plant
      operationId: updatePlant
      tags:
        - plant
      parameters:
        - name: id
          in: path
          description: id of the plant to update
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        description: Plant to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/plant'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/plant'
        '404':
          description: Not Found
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      summary: delete a plant
      operationId: deletePlant
      tags:
        - plant
      parameters:
        - name: id
          in: path
          description: id of the plant to delete
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/v1/plants/research/{name}:
    get:
      summary: get a plant by name
      operationId: getPlantByName
      tags:
        - plant
      parameters:
        - name: name
          in: path
          description: name of the plant to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/plant'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  /api/v1/greenhouses:
    get:
      summary: get all information of greenhouses
      operationId: getGreenhouses
      tags:
        - greenhouse
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/daoGreenhouse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      summary: create a new greenhouse
      operationId: createGreenhouse
      tags:
        - greenhouse
      requestBody:
        description: Greenhouses to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dtoCreateGreenhouse'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/daoGreenhouse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/v1/greenhouses/{id}: 
    get:
      summary: get a greenhouse by id
      operationId: getGreenhouseById
      tags:
        - greenhouse
      parameters:
        - name: id
          in: path
          description: id of the greenhouse to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/daoGreenhouse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      summary: update a greenhouse
      operationId: updateGreenhouse
      tags:
        - greenhouse
      parameters:
        - name: id
          in: path
          description: id of the greenhouse to update
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        description: Greenhouse to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dtoUpadateGreenhouse'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/daoGreenhouse'
        '404':
          description: Not Found
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      summary: delete a greenhouse
      operationId: deleteGreenhouse
      tags:
        - greenhouse
      parameters:
        - name: id
          in: path
          description: id of the greenhouse to delete
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/daoGreenhouse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'


  /api/v1/users:
    get:
      summary: get all information of users
      operationId: getUsers
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/daoUser'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      
    post:
      summary: create a new user
      operationId: createUser
      tags:
        - user
      requestBody:
        description: Users to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/daoUser'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dtoUser'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      
  /api/v1/users/{email}:
    get:
      summary: get a user by email
      operationId: getUserByemail
      tags:
        - user
      parameters:
        - name: email
          in: path
          description: email of the user to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dtoUser'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      summary: update a user
      operationId: updateUser
      tags:
        - user
      parameters:
        - name: email
          in: path
          description: email of the user to update
          required: true
          schema:
            type: string
      requestBody:
        description: User to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/daoUser'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dtoUser'
        '404':
          description: Not Found
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      summary: delete a user
      operationId: deleteUser
      tags:
        - user
      parameters:
        - name: email
          in: path
          description: email of the user to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          
  /api/v1/users/{email}/greenhouses:
    get:
      summary: get all greenhouse of a user
      operationId: getAllUsersGreenhouse
      tags:
        - greenhouse of a user
      parameters:
        - name: email
          in: path
          description: email of the user to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/daoGreenhouse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  /api/v1/greenhouses/{greenhouse_id}/plants:
    get:
      summary: get all plants of a greenhouses
      operationId: getAllPlantsOfGreenhouse
      tags:
        - plants in greenhouse
      parameters:
        - name: greenhouse_id
          in: path
          description: id of the greenhouse to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/plant'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      summary: add a plant to a greenhouse
      operationId: mapPlantToGreenhouse
      tags:
        - plants in greenhouse
      parameters:
        - name: greenhouse_id
          in: path
          description: id of the greenhouse to add
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        description: Plant to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/daoMapPlant'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dtoMapPlant'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  /api/v1/greenhouses/{greenhouse_id}/plants/{plant_id}:
    patch:
      summary: update quantity plant in a greenhouse
      operationId: updateQuantityPlantInGreenhouse
      tags:
        - plants in greenhouse
      parameters:
        - name: greenhouse_id
          in: path
          description: id of the greenhouse to update
          required: true
          schema:
            type: integer
            minimum: 1
        - name: plant_id
          in: path
          description: id of the plant to update
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        description: Quantity of plant to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/daoMapPlant'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dtoMapPlant'
        '404':
          description: Not Found
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

    delete:
      summary: delete a plant from a greenhouse
      operationId: deletePlantFromGreenhouse
      tags:
        - plants in greenhouse
      parameters:
        - name: greenhouse_id
          in: path
          description: id of the greenhouse to delete
          required: true
          schema:
            type: integer
            minimum: 1
        - name: plant_id
          in: path
          description: id of the plant to delete
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '204':
          description: No Content

        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
components:
  securitySchemes:
    GoogleOAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/v2/auth
          tokenUrl: https://oauth2.googleapis.com/token
          scopes:
            openid: openid
            email: email
            profile: profile
  schemas:
    plant:
      type: object
      properties:
        plant_id:
          type: integer
          format: int32
        name:
          type: string
        description:
          type: string
    
    daoGreenhouse:
      type: object
      properties:
        greenhouse_id:
          type: integer
          format: int32
        name:
          type: string
        description:
          type: string
        temperature:
          type: string
        humidity:
          type: integer

    dtoCreateGreenhouse:
      type: object
      required:
        - email
        - name
      properties:
        email:
          type: string
        name:
          type: string
        description:
          type: string
    
    dtoUpadateGreenhouse:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        temperature:
          type: string
        humidity:
          type: integer
  
    dtoMapPlant:
      type: object
      required:
        - greenhouse_id
        - plant_id
      properties:
        greenhouse_id:
          type: integer
          format: int32
        plant_id:
          type: integer
          format: int32
        quantity:
          type: integer
          format: int32
        name:
          type: string
        description:
          type: string
        
    daoMapPlant:
      type: object
      properties:
        plant_id:
          type: integer
          format: int32
        quantity:
          type: integer
          format: int32
        
    dtoUser:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        surname:
          type: string
        role:
          type: string

    daoUser:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        surname:
          type: string

    greenhouseUser:
      type: object
      properties:
        greenhouse_id:
          type: integer
          format: int32
        email:
          type: string
    
    sensor:
      type: object
      properties:
        sensor_id:
          type: integer
          format: int32
        name:
          type: string
        description:
          type: string
        greenhouse_id:
          type: integer
          format: int32

    data:
      type: object
      properties:
        data_id:
          type: integer
          format: int32
        sensor_id:
          type: integer
          format: int32
        value:
          type: string
        date:
          type: string
          format: date-time
  
    error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
